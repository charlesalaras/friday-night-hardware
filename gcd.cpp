// C++ program to find GCD of two or
// more numbers
#include <iostream>
#include <bits/stdc++.h>
#include <algorithm>
#include <vector>
using namespace std;
 
// Function to return gcd of a and b
int gcd(int a, int b)
{
    if (a == 0)
        return b;
    return gcd(b % a, a);
}
 
// Function to find gcd of array of
// numbers
int findGCD(int arr[], int n)
{
    int result = arr[0];
    for (int i = 1; i < n; i++)
    {
        result = gcd(arr[i], result);
 
        if(result == 1)
        {
           return 1;
        }
    }
    return result;
}
 
// Driver code
int main()
{
vector<float> melody = {987.76, 0, 987.76, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 1489.97, 0, 987.76, 0, 987.76, 0, 987.76, 0, 1174.65, 0, 987.76, 0, 1108.73, 0, 987.76, 0, 987.76, 0, 987.76, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 1489.97, 0, 987.76, 0, 987.76, 0, 987.76, 0, 1174.65, 0, 987.76, 0, 1318.51, 0, 1108.73, 0, 880, 0, 987.76, 0, 987.76, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 1489.97, 0, 987.76, 0, 987.76, 0, 987.76, 0, 1174.65, 0, 987.76, 0, 1108.73, 0, 987.76, 0, 987.76, 0, 987.76, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 1489.97, 0, 987.76, 0, 987.76, 0, 987.76, 0, 1174.65, 0, 987.76, 0, 1318.51, 0, 1108.73, 0, 880, 0, 1174.65, 0, 1174.65, 0, 1174.65, 0, 1318.51, 0, 1760, 0, 1567.98, 0, 1489.97, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 1489.97, 0, 1174.65, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1174.65, 0, 1174.65, 0, 1318.51, 0, 1760, 0, 1567.98, 0, 1489.97, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 1489.97, 0, 1174.65, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 880, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 987.76, 0, 1489.97, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 1318.51, 0, 880, 0, 880, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 987.76, 0, 1489.97, 0, 1489.97, 0, 1760, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 987.76, 0, 1489.97, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 1318.51, 0, 880, 0, 880, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 987.76, 0, 1489.97, 0, 1489.97, 0, 1760, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 987.76, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 1108.73, 0, 987.76, 0, 1108.73, 0, 987.76, 0, 880, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1174.65, 0, 1108.73, 0, 987.76, 0, 1108.73, 0, 987.76, 0, 880, 0, 987.76, 0, 880, 0, 987.76, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 1108.73, 0, 987.76, 0, 1108.73, 0, 987.76, 0, 880, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1174.65, 0, 1108.73, 0, 987.76, 0, 1108.73, 0, 987.76, 0, 880, 0, 987.76, 0, 880, 0, 1174.65, 0, 1174.65, 0, 1174.65, 0, 1318.51, 0, 1760, 0, 1567.98, 0, 1489.97, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 1489.97, 0, 1174.65, 0, 1174.65, 1174.65, 0, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 987.76, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1174.65, 0, 1174.65, 0, 1318.51, 0, 1760, 0, 1567.98, 0, 1489.97, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 1489.97, 0, 1174.65, 0, 1174.65, 1174.65, 0, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 987.76, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 880, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 987.76, 0, 1489.97, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 1318.51, 0, 880, 0, 880, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 987.76, 0, 1489.97, 0, 1489.97, 0, 1760, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 987.76, 0, 1489.97, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 1318.51, 0, 880, 0, 880, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 987.76, 0, 1489.97, 0, 1489.97, 0, 1760, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 987.76, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 1108.73, 0, 987.76, 0, 1108.73, 0, 987.76, 0, 880, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1174.65, 0, 1108.73, 0, 987.76, 0, 1108.73, 0, 987.76, 0, 880, 0, 987.76, 0, 880, 0, 987.76, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 1108.73, 0, 987.76, 0, 1108.73, 0, 987.76, 0, 880, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1174.65, 0, 1108.73, 0, 987.76, 0, 1108.73, 0, 987.76, 0, 880, 0, 987.76, 0, 880, 0, 987.76, 0, 987.76, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 1489.97, 0, 987.76, 0, 987.76, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 987.76, 0, 987.76, 0, 987.76, 0, 1174.65, 0, 1318.51, 0, 1489.97, 0, 1760, 0, 1174.65, 0, 987.76, 0, 1174.65, 0, 1489.97, 0, 1318.51, 0, 1108.73, 0, 1174.65, 0, 1108.73, 0, 880, 0, 987.76, 0, 987.76, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 1489.97, 0, 987.76, 0, 987.76, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 987.76, 0, 987.76, 0, 987.76, 0, 1174.65, 0, 1318.51, 0, 1489.97, 0, 1760, 0, 1174.65, 0, 987.76, 0, 1174.65, 0, 1489.97, 0, 1318.51, 0, 1108.73, 0, 1174.65, 0, 1108.73, 0, 880, 0, 1174.65, 0, 1174.65, 0, 1174.65, 0, 1318.51, 0, 1760, 0, 1567.98, 0, 1489.97, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 1489.97, 0, 1174.65, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1174.65, 0, 1174.65, 0, 1318.51, 0, 1760, 0, 1567.98, 0, 1489.97, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 1489.97, 0, 1174.65, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 880, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 987.76, 0, 1489.97, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 1318.51, 0, 880, 0, 880, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 987.76, 0, 1489.97, 0, 1489.97, 0, 1760, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 987.76, 0, 1489.97, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 1174.65, 0, 1318.51, 0, 1318.51, 0, 880, 0, 880, 0, 987.76, 0, 1108.73, 0, 1174.65, 0, 987.76, 0, 1489.97, 0, 1489.97, 0, 1760, 0, 1567.98, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1489.97, 0, 1318.51, 0, 1174.65, 0, 1108.73, 0, 987.76};
vector<short> rhythm = {96, 192, 96, 192, 96, 0, 48, 0, 48, 0, 48, 0, 48, 96, 96, 192, 96, 192, 96, 48, 48, 96, 96, 48, 48, 96, 96, 48, 96, 192, 96, 192, 96, 0, 48, 0, 48, 0, 48, 0, 48, 96, 96, 192, 96, 192, 96, 48, 48, 96, 96, 48, 48, 0, 48, 0, 48, 96, 96, 192, 96, 192, 96, 0, 48, 0, 48, 0, 48, 0, 48, 96, 96, 192, 96, 192, 96, 48, 48, 96, 96, 48, 48, 96, 96, 48, 96, 192, 96, 192, 96, 0, 48, 0, 48, 0, 48, 0, 48, 96, 96, 192, 96, 192, 96, 48, 48, 96, 96, 48, 48, 0, 48, 48, 48, 96, 864, 0, 96, 48, 96, 0, 96, 336, 96, 192, 96, 192, 96, 144, 48, 0, 48, 48, 96, 144, 96, 192, 96, 192, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 864, 0, 96, 48, 96, 0, 96, 336, 96, 192, 96, 192, 96, 144, 48, 0, 48, 48, 96, 144, 96, 192, 96, 192, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 80, 32, 32, 32, 32, 32, 48, 48, 144, 48, 96, 48, 176, 48, 160, 48, 192, 48, 96, 48, 96, 48, 96, 48, 176, 48, 112, 48, 128, 32, 32, 32, 32, 32, 48, 48, 144, 48, 96, 48, 176, 48, 176, 48, 208, 48, 96, 48, 96, 48, 96, 48, 112, 32, 32, 32, 32, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 176, 48, 160, 48, 192, 48, 96, 48, 96, 48, 96, 48, 176, 48, 112, 48, 128, 32, 32, 32, 32, 32, 48, 48, 144, 48, 96, 48, 176, 48, 176, 48, 208, 48, 96, 48, 96, 48, 96, 48, 112, 32, 32, 32, 32, 48, 96, 48, 96, 640, 64, 48, 96, 48, 96, 288, 0, 288, 0, 288, 0, 32, 32, 32, 32, 32, 128, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 288, 0, 288, 0, 640, 64, 48, 96, 48, 96, 288, 0, 288, 0, 288, 0, 32, 32, 32, 32, 32, 128, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 288, 0, 288, 0, 864, 0, 96, 48, 96, 0, 96, 336, 96, 192, 96, 192, 96, 128, 32, 32, 32, 64, 96, 144, 96, 192, 96, 160, 0, 48, 0, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 864, 0, 96, 48, 96, 0, 96, 336, 96, 192, 96, 192, 96, 128, 32, 32, 32, 64, 96, 144, 96, 192, 96, 160, 0, 48, 0, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 80, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 32, 32, 32, 32, 32, 128, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 80, 32, 32, 32, 32, 32, 128, 32, 32, 32, 32, 32, 128, 32, 32, 32, 32, 32, 128, 32, 32, 32, 32, 32, 128, 32, 32, 32, 32, 32, 128, 32, 32, 32, 32, 32, 128, 32, 32, 32, 32, 32, 128, 32, 32, 32, 32, 32, 128, 32, 32, 32, 32, 32, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 32, 32, 32, 32, 32, 128, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 80, 32, 32, 32, 32, 32, 128, 32, 32, 32, 32, 32, 128, 32, 32, 32, 32, 32, 128, 32, 32, 32, 32, 32, 128, 32, 32, 32, 32, 32, 128, 32, 32, 32, 32, 32, 128, 32, 32, 32, 32, 32, 128, 32, 32, 32, 32, 32, 128, 32, 32, 32, 32, 32, 144, 32, 32, 32, 32, 32, 48, 48, 144, 48, 96, 48, 176, 48, 160, 48, 192, 48, 96, 48, 96, 48, 96, 48, 176, 48, 112, 48, 128, 32, 32, 32, 32, 32, 48, 48, 144, 48, 96, 48, 176, 48, 176, 48, 208, 48, 96, 48, 96, 48, 96, 48, 112, 32, 32, 32, 32, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 176, 48, 160, 48, 192, 48, 96, 48, 96, 48, 96, 48, 176, 48, 112, 48, 128, 32, 32, 32, 32, 32, 48, 48, 144, 48, 96, 48, 176, 48, 176, 48, 208, 48, 96, 48, 96, 48, 96, 48, 112, 32, 32, 32, 32, 48, 96, 48, 96, 640, 64, 48, 96, 48, 96, 288, 0, 288, 0, 288, 0, 32, 32, 32, 32, 32, 128, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 288, 0, 288, 0, 640, 64, 48, 96, 48, 96, 288, 0, 288, 0, 288, 0, 32, 32, 32, 32, 32, 128, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 288, 0, 288, 0, 96, 192, 96, 192, 96, 0, 48, 0, 48, 0, 48, 0, 48, 96, 96, 192, 96, 192, 96, 192, 32, 32, 32, 32, 224, 80, 96, 192, 96, 192, 96, 48, 48, 0, 48, 0, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 80, 32, 32, 32, 32, 32, 96, 48, 96, 96, 192, 96, 192, 96, 0, 48, 0, 48, 0, 48, 0, 48, 96, 96, 192, 96, 192, 96, 192, 32, 32, 32, 32, 224, 80, 96, 192, 96, 192, 96, 48, 48, 0, 48, 0, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 80, 32, 32, 32, 32, 32, 96, 48, 96, 864, 0, 96, 48, 96, 0, 96, 336, 96, 192, 96, 192, 96, 144, 48, 0, 48, 48, 96, 144, 96, 192, 96, 192, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 864, 0, 96, 48, 96, 0, 96, 336, 96, 192, 96, 192, 96, 144, 48, 0, 48, 48, 96, 144, 96, 192, 96, 192, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 32, 32, 32, 32, 32, 48, 48, 144, 48, 96, 48, 176, 48, 160, 48, 192, 48, 96, 48, 96, 48, 96, 48, 176, 48, 112, 48, 128, 32, 32, 32, 32, 32, 48, 48, 144, 48, 96, 48, 176, 48, 176, 48, 208, 48, 96, 48, 96, 48, 96, 48, 112, 32, 32, 32, 32, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 96, 48, 176, 48, 160, 48, 192, 48, 96, 48, 96, 48, 96, 48, 176, 48, 112, 48, 128, 32, 32, 32, 32, 32, 48, 48, 144, 48, 96, 48, 176, 48, 176, 48, 208, 48, 96, 48, 96, 48, 96, 48, 112, 32, 32, 32, 32, 48, 96, 48, 96, 1408};
vector<float> sectmelody;
vector<int> sectrhythm;
vector<int> realrhythm;
int offset = 0;
int indexarr[] = {0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,17,18,20,21,23,24,26,27,29,30,32,33,35,36,38,39};
int j = 0;
//cout << melody.at(314) << "\n" << rhythm.at(314); // 117 138
for(int i = 486; i < 570; i++) {
    if(melody.at(i) == 0) {
        sectmelody.push_back(melody.at(i - 1));
        sectrhythm.push_back(rhythm.at(i) + rhythm.at(i - 1));
    }
}
for(int i = 0; i < sectmelody.size(); i++) {
    if(i == indexarr[j]) {
        j++;
        realrhythm.push_back(offset);
        offset = sectrhythm.at(i);
    }
    else {
        offset = offset + sectrhythm.at(i);
    }
}

cout << "float sectmelody[] = {";
for(int i = 0; i < sectmelody.size(); i++) {
    cout << sectmelody.at(i) << ", ";
}
cout << "};\n";
cout << "short realrhythm[] = {";
for(int i = 0; i < realrhythm.size(); i++) {
    cout << realrhythm.at(i) << ", ";
}
cout << "};\n";
cout << "New Melody Size: " << sectmelody.size() << endl;
cout << "New Rhythm Size: " << realrhythm.size() << endl;
    return 0;
}